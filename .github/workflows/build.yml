name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "Select the source branch"
        required: false
        default: "lede-maste"
        type: choice
        options:
          - openwrt-main
          - lede-master
          - immortalwrt-master
      rockchip_subtarget:
        description: "Select rockchip subtarget"
        required: false
        default: "rk33xx"
        type: choice
        options:
          - rk33xx
          - rk35xx
      openwrt_board:
        description: "Select device board"
        required: false
        default: "all"
        type: choice
        options:
          - friendlyarm_nanopi-r4se
          - rockchip_fine3399
          - rockchip_tb-ls3399
          - rockchip_tpm312
          - rockchip_xiaobao-nas
      openwrt_storage:
        description: "Select image storage type."
        required: false
        default: "save"
        type: choice
        options:
          - save
          - temp

env:
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/.config
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh
  SOURCE_BOARD: ${{ inputs.openwrt_board }}
  SUBTARGET: ${{ inputs.rockchip_subtarget }}
  TZ: America/New_York

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2 python3.6 python3 python3-pyelftools libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /mnt/workdir
          sudo chown $USER:$GROUPS /mnt/workdir
          df -Th

      - name: Clone source code [ ${{ inputs.source_branch }} ]
        working-directory: /mnt/workdir
        id: codes
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          # Set up compilation source code
          if [[ "${{ inputs.source_branch }}" == *"openwrt"* ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="official"
          elif [[ "${{ inputs.source_branch }}" == *"lede"* ]]; then
              REPO_URL="https://github.com/coolsnowwolf/lede"
              REPO_BRANCH="master"
              TAGS_NAME="lede"
          elif [[ "${{ inputs.source_branch }}" == *"immortalwrt"* ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          else
              echo "Unknown source code repository."
              exit 1
          fi

          # Clone source code
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt

          # Set output information
          echo "build_tag=OpenWrt_${TAGS_NAME}_$(date +"%Y.%m")" >> ${GITHUB_OUTPUT}
          echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${TAGS_NAME} ]"
          df -hT ${PWD}
          echo "REPO_URL=${REPO_URL}" >> ${GITHUB_OUTPUT}
          echo "TAGS_NAME=${TAGS_NAME}" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Set up environment variables
        run: |
          echo "FEEDS_CONF=$FEEDS_CONF" >> $GITHUB_ENV
          echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
          echo "DIY_P1_SH=$DIY_P1_SH" >> $GITHUB_ENV
          echo "DIY_P2_SH=$DIY_P2_SH" >> $GITHUB_ENV
          echo "SOURCE_BOARD=$SOURCE_BOARD" >> $GITHUB_ENV
          echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
          echo "TZ=$TZ" >> $GITHUB_ENV
          
      - name: Load custom feeds
        run: |
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      - name: Update feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [[ -d "files" ]] && mv -f files openwrt/files
          [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} openwrt/.config
          chmod +x ${DIY_P2_SH}
          echo "Using SOURCE_BRANCH: ${{ inputs.source_branch }} in DIY_P2_SH" 
          cd openwrt/
          ls -la
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      - name: Download package
        id: package
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
      
      - name: Compile the OpenWrt
        id: compile
        run: |
          cd openwrt/
          df -Th
          echo -e "$(nproc) thread compile"
          make -j$(($(nproc) + 1)) V=s || make -j1 || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clear server space
        id: clean
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          # Clean up server space
          cd openwrt/
          [[ -d "output" ]] || mkdir output
          find bin/targets/rockchip/ -type f -name '*.gz' -exec cp -f {} output/ \;
          # cp -f bin/targets/*/*/*.gz output/
          cp -f .config output/config
          # rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null

          # Generate sha256sum file
          cd output/
          for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done
          ls -lh .

          # Set output information
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Upload OpenWrt to Release
        uses: ncipollo/release-action@main
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: openwrt/output/*
          allowUpdates: true 
          removeArtifacts: false 
          replacesArtifacts: true 
          token: ${{ secrets.OP_TOKEN }}
